Line no. 1: type_specifier : INT

int

Line no. 1: type_specifier : INT

int

Line no. 1: parameter_list  : type_specifier ID

int a

New Scopetable with id 1DOT1 created
Line no. 2: type_specifier : INT

int

Line no. 2: declaration_list : ID

k

Line no. 2: var_declaration : type_specifier declaration_list SEMICOLON

int k;

Line no. 2: statement : var_declaration

int k;

Line no. 2: statements : statement

int k;

Line no. 3: variable : ID

k

Line no. 3: factor : CONST_INT

5

Line no. 3: unary_expression : factor

5

Line no. 3: term : unary_expression

5

Line no. 3: simple_expression : term

5

Line no. 3: rel_expression : simple_expression

5

Line no. 3: logic_expression : rel_expression

5

Line no. 3: expression : variable ASSIGNOP logic_expression

k = 5

Line no. 3: expression_statement : expression SEMICOLON

k = 5;

Line no. 3: statement : expression_statement

k = 5;

Line no. 3: statements : statements statement

int k;
k = 5;


Line no. 4: variable : ID

k

Line no. 4: factor : variable

k

Line no. 4: unary_expression : factor

k

Line no. 4: term : unary_expression

k

Line no. 4: simple_expression : term

k

Line no. 4: factor : CONST_INT

0

Line no. 4: unary_expression : factor

0

Line no. 4: term : unary_expression

0

Line no. 4: simple_expression : term

0

Line no. 4: rel_expression : simple_expression RELOP simple_expression

k>0

Line no. 4: logic_expression : rel_expression

k>0

Line no. 4: expression : logic_expression

k>0

Line no. 5: variable : ID

a

Line no. 5: factor : variable INCOP

a++

Line no. 5: unary_expression : factor

a

Line no. 5: term : unary_expression

a

Line no. 5: simple_expression : term

a

Line no. 5: rel_expression : simple_expression

a

Line no. 5: logic_expression : rel_expression

a

Line no. 5: expression : logic_expression

a

Line no. 5: expression_statement : expression SEMICOLON

a;

Line no. 5: statement : expression_statement

a;

Line no. 5: statements : statement

a;

Line no. 6: variable : ID

k

Line no. 6: factor : variable DECOP

k--

Line no. 6: unary_expression : factor

k

Line no. 6: term : unary_expression

k

Line no. 6: simple_expression : term

k

Line no. 6: rel_expression : simple_expression

k

Line no. 6: logic_expression : rel_expression

k

Line no. 6: expression : logic_expression

k

Line no. 6: expression_statement : expression SEMICOLON

k;

Line no. 6: statement : expression_statement

k;

Line no. 6: statements : statements statement

a;
k;


Line no. 7: compound_statement : LCURL statements RCURL

{
a;
k;
}

Line no. 7: statement : compound_statement

{
a;
k;
}

Line no. 7: statement : WHILE LPAREN expression RPAREN statement

while(k>0){
a;
k;
}

Line no. 7: statements : statements statement

int k;
k = 5;
while(k>0){
a;
k;
}


Line no. 8: factor : CONST_INT

3

Line no. 8: unary_expression : factor

3

Line no. 8: term : unary_expression

3

Line no. 8: variable : ID

a

Line no. 8: factor : variable

a

Line no. 8: unary_expression : factor

a

Line no. 8: term : unary_expression

3*a

Line no. 8: simple_expression : term

3*a

Line no. 8: factor : CONST_INT

7

Line no. 8: unary_expression : factor

7

Line no. 8: term : unary_expression

7

Line no. 8: simple_expression : simple_expression ADDOP term

3*a-7

Line no. 8: rel_expression : simple_expression

3*a-7

Line no. 8: logic_expression : rel_expression

3*a-7

Line no. 8: expression : logic_expression

3*a-7

Line no. 8: statement : RETURN expression SEMICOLON

return 3*a-7;

Line no. 8: statements : statements statement

int k;
k = 5;
while(k>0){
a;
k;
}
return 3*a-7;


Line no. 9: variable : ID

a

Line no. 9: factor : CONST_INT

9

Line no. 9: unary_expression : factor

9

Line no. 9: term : unary_expression

9

Line no. 9: simple_expression : term

9

Line no. 9: rel_expression : simple_expression

9

Line no. 9: logic_expression : rel_expression

9

Line no. 9: expression : variable ASSIGNOP logic_expression

a = 9

Line no. 9: expression_statement : expression SEMICOLON

a = 9;

Line no. 9: statement : expression_statement

a = 9;

Line no. 9: statements : statements statement

int k;
k = 5;
while(k>0){
a;
k;
}
return 3*a-7;
a = 9;


Line no. 10: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f(int a){
int k;
k = 5;
while(k>0){
a;
k;
}
return 3*a-7;
a = 9;
}

ScopeTable # 1DOT1
7 --> < a : ID> 
17 --> < k : ID> 

ScopeTable # 1
12 --> < f : ID> 

Scopetable with id 1DOT1 removed
Line no. 10: unit : func_definition

int f(int a){
int k;
k = 5;
while(k>0){
a;
k;
}
return 3*a-7;
a = 9;
}

Line no. 10: program : unit

int f(int a){
int k;
k = 5;
while(k>0){
a;
k;
}
return 3*a-7;
a = 9;
}

Line no. 12: type_specifier : INT

int

Line no. 12: type_specifier : INT

int

Line no. 12: parameter_list  : type_specifier ID

int a

Line no. 12: type_specifier : INT

int

Line no. 12: parameter_list  : parameter_list COMMA type_specifier ID

int a, int b

New Scopetable with id 1DOT2 created
Line no. 14: type_specifier : INT

int

Line no. 14: declaration_list : ID

x

Line no. 14: declaration_list : declaration_list COMMA ID

x, i

Line no. 14: var_declaration : type_specifier declaration_list SEMICOLON

int x, i;

Line no. 14: statement : var_declaration

int x, i;

Line no. 14: statements : statement

int x, i;

Line no. 15: variable : ID

x

Line no. 15: variable : ID

a

Line no. 15: factor : variable

a

Line no. 15: unary_expression : factor

a

Line no. 15: term : unary_expression

a

Line no. 15: simple_expression : term

a

Line no. 15: rel_expression : simple_expression

a

Line no. 15: logic_expression : rel_expression

a

Line no. 15: arguments : logic_expression

a

Line no. 15: argument_list : arguments

a

Line no. 15: factor : ID LPAREN argument_list RPAREN

f(a)

Line no. 15: unary_expression : factor

f(a)

Line no. 15: term : unary_expression

f(a)

Line no. 15: simple_expression : term

f(a)

Line no. 15: variable : ID

a

Line no. 15: factor : variable

a

Line no. 15: unary_expression : factor

a

Line no. 15: term : unary_expression

a

Line no. 15: simple_expression : simple_expression ADDOP term

f(a)+a

Line no. 15: variable : ID

b

Line no. 15: factor : variable

b

Line no. 15: unary_expression : factor

b

Line no. 15: term : unary_expression

b

Line no. 15: simple_expression : simple_expression ADDOP term

f(a)+a+b

Line no. 15: rel_expression : simple_expression

f(a)+a+b

Line no. 15: logic_expression : rel_expression

f(a)+a+b

Line no. 15: expression : variable ASSIGNOP logic_expression

x = f(a)+a+b

Line no. 15: expression_statement : expression SEMICOLON

x = f(a)+a+b;

Line no. 15: statement : expression_statement

x = f(a)+a+b;

Line no. 15: statements : statements statement

int x, i;
x = f(a)+a+b;


Line no. 17: variable : ID

i

Line no. 17: factor : CONST_INT

0

Line no. 17: unary_expression : factor

0

Line no. 17: term : unary_expression

0

Line no. 17: simple_expression : term

0

Line no. 17: rel_expression : simple_expression

0

Line no. 17: logic_expression : rel_expression

0

Line no. 17: expression : variable ASSIGNOP logic_expression

i = 0

Line no. 17: expression_statement : expression SEMICOLON

i = 0;

Line no. 17: variable : ID

i

Line no. 17: factor : variable

i

Line no. 17: unary_expression : factor

i

Line no. 17: term : unary_expression

i

Line no. 17: simple_expression : term

i

Line no. 17: factor : CONST_INT

7

Line no. 17: unary_expression : factor

7

Line no. 17: term : unary_expression

7

Line no. 17: simple_expression : term

7

Line no. 17: rel_expression : simple_expression RELOP simple_expression

i<7

Line no. 17: logic_expression : rel_expression

i<7

Line no. 17: expression : logic_expression

i<7

Line no. 17: expression_statement : expression SEMICOLON

i<7;

Line no. 17: variable : ID

i

Line no. 17: factor : variable INCOP

i++

Line no. 17: unary_expression : factor

i

Line no. 17: term : unary_expression

i

Line no. 17: simple_expression : term

i

Line no. 17: rel_expression : simple_expression

i

Line no. 17: logic_expression : rel_expression

i

Line no. 17: expression : logic_expression

i

Line no. 18: variable : ID

i

Line no. 18: factor : variable

i

Line no. 18: unary_expression : factor

i

Line no. 18: term : unary_expression

i

Line no. 18: factor : CONST_INT

3

Line no. 18: unary_expression : factor

3

Line no. 18: term : unary_expression

i%3

Line no. 18: simple_expression : term

i%3

Line no. 18: factor : CONST_INT

0

Line no. 18: unary_expression : factor

0

Line no. 18: term : unary_expression

0

Line no. 18: simple_expression : term

0

Line no. 18: rel_expression : simple_expression RELOP simple_expression

i%3==0

Line no. 18: logic_expression : rel_expression

i%3==0

Line no. 18: expression : logic_expression

i%3==0

Line no. 19: variable : ID

x

Line no. 19: variable : ID

x

Line no. 19: factor : variable

x

Line no. 19: unary_expression : factor

x

Line no. 19: term : unary_expression

x

Line no. 19: simple_expression : term

x

Line no. 19: factor : CONST_INT

5

Line no. 19: unary_expression : factor

5

Line no. 19: term : unary_expression

5

Line no. 19: simple_expression : simple_expression ADDOP term

x+5

Line no. 19: rel_expression : simple_expression

x+5

Line no. 19: logic_expression : rel_expression

x+5

Line no. 19: expression : variable ASSIGNOP logic_expression

x = x+5

Line no. 19: expression_statement : expression SEMICOLON

x = x+5;

Line no. 19: statement : expression_statement

x = x+5;

Line no. 19: statements : statement

x = x+5;

Line no. 20: compound_statement : LCURL statements RCURL

{
x = x+5;
}

Line no. 20: statement : compound_statement

{
x = x+5;
}

Line no. 22: variable : ID

x

Line no. 22: variable : ID

x

Line no. 22: factor : variable

x

Line no. 22: unary_expression : factor

x

Line no. 22: term : unary_expression

x

Line no. 22: simple_expression : term

x

Line no. 22: factor : CONST_INT

1

Line no. 22: unary_expression : factor

1

Line no. 22: term : unary_expression

1

Line no. 22: simple_expression : simple_expression ADDOP term

x-1

Line no. 22: rel_expression : simple_expression

x-1

Line no. 22: logic_expression : rel_expression

x-1

Line no. 22: expression : variable ASSIGNOP logic_expression

x = x-1

Line no. 22: expression_statement : expression SEMICOLON

x = x-1;

Line no. 22: statement : expression_statement

x = x-1;

Line no. 22: statements : statement

x = x-1;

Line no. 23: compound_statement : LCURL statements RCURL

{
x = x-1;
}

Line no. 23: statement : compound_statement

{
x = x-1;
}

Line no. 23: statement : IF LPAREN expression RPAREN statement ELSE statement

if(i%3==0){
x = x+5;
}else{
x = x-1;
}

Line no. 23: statements : statement

if(i%3==0){
x = x+5;
}else{
x = x-1;
}

Line no. 24: compound_statement : LCURL statements RCURL

{
if(i%3==0){
x = x+5;
}else{
x = x-1;
}
}

Line no. 24: statement : compound_statement

{
if(i%3==0){
x = x+5;
}else{
x = x-1;
}
}

Line no. 24: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i = 0;i<7;i){
if(i%3==0){
x = x+5;
}else{
x = x-1;
}
}

Line no. 24: statements : statements statement

int x, i;
x = f(a)+a+b;
for(i = 0;i<7;i){
if(i%3==0){
x = x+5;
}else{
x = x-1;
}
}


Line no. 26: variable : ID

x

Line no. 26: factor : variable

x

Line no. 26: unary_expression : factor

x

Line no. 26: term : unary_expression

x

Line no. 26: simple_expression : term

x

Line no. 26: rel_expression : simple_expression

x

Line no. 26: logic_expression : rel_expression

x

Line no. 26: expression : logic_expression

x

Line no. 26: statement : RETURN expression SEMICOLON

return x;

Line no. 26: statements : statements statement

int x, i;
x = f(a)+a+b;
for(i = 0;i<7;i){
if(i%3==0){
x = x+5;
}else{
x = x-1;
}
}
return x;


Line no. 27: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int g(int a, int b){
int x, i;
x = f(a)+a+b;
for(i = 0;i<7;i){
if(i%3==0){
x = x+5;
}else{
x = x-1;
}
}
return x;
}

ScopeTable # 1DOT2
0 --> < x : ID> 
7 --> < a : ID> 
8 --> < b : ID> 
15 --> < i : ID> 

ScopeTable # 1
12 --> < f : ID> 
13 --> < g : ID> 

Scopetable with id 1DOT2 removed
Line no. 27: unit : func_definition

int g(int a, int b){
int x, i;
x = f(a)+a+b;
for(i = 0;i<7;i){
if(i%3==0){
x = x+5;
}else{
x = x-1;
}
}
return x;
}

Line no. 27: program : program unit

int f(int a){
int k;
k = 5;
while(k>0){
a;
k;
}
return 3*a-7;
a = 9;
}
int g(int a, int b){
int x, i;
x = f(a)+a+b;
for(i = 0;i<7;i){
if(i%3==0){
x = x+5;
}else{
x = x-1;
}
}
return x;
}

Line no. 29: type_specifier : INT

int

New Scopetable with id 1DOT3 created
Line no. 30: type_specifier : INT

int

Line no. 30: declaration_list : ID

a

Line no. 30: declaration_list : declaration_list COMMA ID

a, b

Line no. 30: declaration_list : declaration_list COMMA ID

a, b, i

Line no. 30: var_declaration : type_specifier declaration_list SEMICOLON

int a, b, i;

Line no. 30: statement : var_declaration

int a, b, i;

Line no. 30: statements : statement

int a, b, i;

Line no. 31: variable : ID

a

Line no. 31: factor : CONST_INT

1

Line no. 31: unary_expression : factor

1

Line no. 31: term : unary_expression

1

Line no. 31: simple_expression : term

1

Line no. 31: rel_expression : simple_expression

1

Line no. 31: logic_expression : rel_expression

1

Line no. 31: expression : variable ASSIGNOP logic_expression

a = 1

Line no. 31: expression_statement : expression SEMICOLON

a = 1;

Line no. 31: statement : expression_statement

a = 1;

Line no. 31: statements : statements statement

int a, b, i;
a = 1;


Line no. 32: variable : ID

b

Line no. 32: factor : CONST_INT

2

Line no. 32: unary_expression : factor

2

Line no. 32: term : unary_expression

2

Line no. 32: simple_expression : term

2

Line no. 32: rel_expression : simple_expression

2

Line no. 32: logic_expression : rel_expression

2

Line no. 32: expression : variable ASSIGNOP logic_expression

b = 2

Line no. 32: expression_statement : expression SEMICOLON

b = 2;

Line no. 32: statement : expression_statement

b = 2;

Line no. 32: statements : statements statement

int a, b, i;
a = 1;
b = 2;


Line no. 33: variable : ID

a

Line no. 33: variable : ID

a

Line no. 33: factor : variable

a

Line no. 33: unary_expression : factor

a

Line no. 33: term : unary_expression

a

Line no. 33: simple_expression : term

a

Line no. 33: rel_expression : simple_expression

a

Line no. 33: logic_expression : rel_expression

a

Line no. 33: arguments : logic_expression

a

Line no. 33: variable : ID

b

Line no. 33: factor : variable

b

Line no. 33: unary_expression : factor

b

Line no. 33: term : unary_expression

b

Line no. 33: simple_expression : term

b

Line no. 33: rel_expression : simple_expression

b

Line no. 33: logic_expression : rel_expression

b

Line no. 33: arguments : arguments COMMA logic_expression

a, b

Line no. 33: argument_list : arguments

a, b

Line no. 33: factor : ID LPAREN argument_list RPAREN

g(a, b)

Line no. 33: unary_expression : factor

g(a, b)

Line no. 33: term : unary_expression

g(a, b)

Line no. 33: simple_expression : term

g(a, b)

Line no. 33: rel_expression : simple_expression

g(a, b)

Line no. 33: logic_expression : rel_expression

g(a, b)

Line no. 33: expression : variable ASSIGNOP logic_expression

a = g(a, b)

Line no. 33: expression_statement : expression SEMICOLON

a = g(a, b);

Line no. 33: statement : expression_statement

a = g(a, b);

Line no. 33: statements : statements statement

int a, b, i;
a = 1;
b = 2;
a = g(a, b);


Line no. 34: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);

Line no. 34: statements : statements statement

int a, b, i;
a = 1;
b = 2;
a = g(a, b);
println(a);


Line no. 35: variable : ID

i

Line no. 35: factor : CONST_INT

0

Line no. 35: unary_expression : factor

0

Line no. 35: term : unary_expression

0

Line no. 35: simple_expression : term

0

Line no. 35: rel_expression : simple_expression

0

Line no. 35: logic_expression : rel_expression

0

Line no. 35: expression : variable ASSIGNOP logic_expression

i = 0

Line no. 35: expression_statement : expression SEMICOLON

i = 0;

Line no. 35: variable : ID

i

Line no. 35: factor : variable

i

Line no. 35: unary_expression : factor

i

Line no. 35: term : unary_expression

i

Line no. 35: simple_expression : term

i

Line no. 35: factor : CONST_INT

4

Line no. 35: unary_expression : factor

4

Line no. 35: term : unary_expression

4

Line no. 35: simple_expression : term

4

Line no. 35: rel_expression : simple_expression RELOP simple_expression

i<4

Line no. 35: logic_expression : rel_expression

i<4

Line no. 35: expression : logic_expression

i<4

Line no. 35: expression_statement : expression SEMICOLON

i<4;

Line no. 35: variable : ID

i

Line no. 35: factor : variable INCOP

i++

Line no. 35: unary_expression : factor

i

Line no. 35: term : unary_expression

i

Line no. 35: simple_expression : term

i

Line no. 35: rel_expression : simple_expression

i

Line no. 35: logic_expression : rel_expression

i

Line no. 35: expression : logic_expression

i

Line no. 36: variable : ID

a

Line no. 36: factor : CONST_INT

3

Line no. 36: unary_expression : factor

3

Line no. 36: term : unary_expression

3

Line no. 36: simple_expression : term

3

Line no. 36: rel_expression : simple_expression

3

Line no. 36: logic_expression : rel_expression

3

Line no. 36: expression : variable ASSIGNOP logic_expression

a = 3

Line no. 36: expression_statement : expression SEMICOLON

a = 3;

Line no. 36: statement : expression_statement

a = 3;

Line no. 36: statements : statement

a = 3;

Line no. 37: variable : ID

a

Line no. 37: factor : variable

a

Line no. 37: unary_expression : factor

a

Line no. 37: term : unary_expression

a

Line no. 37: simple_expression : term

a

Line no. 37: factor : CONST_INT

0

Line no. 37: unary_expression : factor

0

Line no. 37: term : unary_expression

0

Line no. 37: simple_expression : term

0

Line no. 37: rel_expression : simple_expression RELOP simple_expression

a>0

Line no. 37: logic_expression : rel_expression

a>0

Line no. 37: expression : logic_expression

a>0

Line no. 38: variable : ID

b

Line no. 38: factor : variable INCOP

b++

Line no. 38: unary_expression : factor

b

Line no. 38: term : unary_expression

b

Line no. 38: simple_expression : term

b

Line no. 38: rel_expression : simple_expression

b

Line no. 38: logic_expression : rel_expression

b

Line no. 38: expression : logic_expression

b

Line no. 38: expression_statement : expression SEMICOLON

b;

Line no. 38: statement : expression_statement

b;

Line no. 38: statements : statement

b;

Line no. 39: variable : ID

a

Line no. 39: factor : variable DECOP

a--

Line no. 39: unary_expression : factor

a

Line no. 39: term : unary_expression

a

Line no. 39: simple_expression : term

a

Line no. 39: rel_expression : simple_expression

a

Line no. 39: logic_expression : rel_expression

a

Line no. 39: expression : logic_expression

a

Line no. 39: expression_statement : expression SEMICOLON

a;

Line no. 39: statement : expression_statement

a;

Line no. 39: statements : statements statement

b;
a;


Line no. 40: compound_statement : LCURL statements RCURL

{
b;
a;
}

Line no. 40: statement : compound_statement

{
b;
a;
}

Line no. 40: statement : WHILE LPAREN expression RPAREN statement

while(a>0){
b;
a;
}

Line no. 40: statements : statements statement

a = 3;
while(a>0){
b;
a;
}


Line no. 41: compound_statement : LCURL statements RCURL

{
a = 3;
while(a>0){
b;
a;
}
}

Line no. 41: statement : compound_statement

{
a = 3;
while(a>0){
b;
a;
}
}

Line no. 41: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i = 0;i<4;i){
a = 3;
while(a>0){
b;
a;
}
}

Line no. 41: statements : statements statement

int a, b, i;
a = 1;
b = 2;
a = g(a, b);
println(a);
for(i = 0;i<4;i){
a = 3;
while(a>0){
b;
a;
}
}


Line no. 42: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(a);

Line no. 42: statements : statements statement

int a, b, i;
a = 1;
b = 2;
a = g(a, b);
println(a);
for(i = 0;i<4;i){
a = 3;
while(a>0){
b;
a;
}
}
println(a);


Line no. 43: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(b);

Line no. 43: statements : statements statement

int a, b, i;
a = 1;
b = 2;
a = g(a, b);
println(a);
for(i = 0;i<4;i){
a = 3;
while(a>0){
b;
a;
}
}
println(a);
println(b);


Line no. 44: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(i);

Line no. 44: statements : statements statement

int a, b, i;
a = 1;
b = 2;
a = g(a, b);
println(a);
for(i = 0;i<4;i){
a = 3;
while(a>0){
b;
a;
}
}
println(a);
println(b);
println(i);


Line no. 45: factor : CONST_INT

0

Line no. 45: unary_expression : factor

0

Line no. 45: term : unary_expression

0

Line no. 45: simple_expression : term

0

Line no. 45: rel_expression : simple_expression

0

Line no. 45: logic_expression : rel_expression

0

Line no. 45: expression : logic_expression

0

Line no. 45: statement : RETURN expression SEMICOLON

return 0;

Line no. 45: statements : statements statement

int a, b, i;
a = 1;
b = 2;
a = g(a, b);
println(a);
for(i = 0;i<4;i){
a = 3;
while(a>0){
b;
a;
}
}
println(a);
println(b);
println(i);
return 0;


Line no. 46: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a, b, i;
a = 1;
b = 2;
a = g(a, b);
println(a);
for(i = 0;i<4;i){
a = 3;
while(a>0){
b;
a;
}
}
println(a);
println(b);
println(i);
return 0;
}

ScopeTable # 1DOT3
7 --> < a : ID> 
8 --> < b : ID> 
15 --> < i : ID> 

ScopeTable # 1
1 --> < main : ID> 
12 --> < f : ID> 
13 --> < g : ID> 

Scopetable with id 1DOT3 removed
Line no. 46: unit : func_definition

int main(){
int a, b, i;
a = 1;
b = 2;
a = g(a, b);
println(a);
for(i = 0;i<4;i){
a = 3;
while(a>0){
b;
a;
}
}
println(a);
println(b);
println(i);
return 0;
}

Line no. 46: program : program unit

int f(int a){
int k;
k = 5;
while(k>0){
a;
k;
}
return 3*a-7;
a = 9;
}
int g(int a, int b){
int x, i;
x = f(a)+a+b;
for(i = 0;i<7;i){
if(i%3==0){
x = x+5;
}else{
x = x-1;
}
}
return x;
}
int main(){
int a, b, i;
a = 1;
b = 2;
a = g(a, b);
println(a);
for(i = 0;i<4;i){
a = 3;
while(a>0){
b;
a;
}
}
println(a);
println(b);
println(i);
return 0;
}

Line no. 46: start : program

int f(int a){
int k;
k = 5;
while(k>0){
a;
k;
}
return 3*a-7;
a = 9;
}
int g(int a, int b){
int x, i;
x = f(a)+a+b;
for(i = 0;i<7;i){
if(i%3==0){
x = x+5;
}else{
x = x-1;
}
}
return x;
}
int main(){
int a, b, i;
a = 1;
b = 2;
a = g(a, b);
println(a);
for(i = 0;i<4;i){
a = 3;
while(a>0){
b;
a;
}
}
println(a);
println(b);
println(i);
return 0;
}

Symbol Table:

ScopeTable # 1
1 --> < main : ID> 
12 --> < f : ID> 
13 --> < g : ID> 



Total Lines: 45

Total Errors: 0

